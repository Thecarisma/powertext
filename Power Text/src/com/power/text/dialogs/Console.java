/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.power.text.dialogs;

import com.power.text.Main;
import static com.power.text.Main.*;
import static com.power.text.internallibrary.BasicEvents.SetCursor;
import com.power.text.internallibrary.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import javax.swing.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Thecarisma
 */
public class Console extends javax.swing.JPanel {
    
    Main main ; public static String type = "power.text >>> " ; String OS = "WINDOWS" ; String[] command = { "cmd", }; Process p ;
    PrintWriter stdin ; String osMinor = "" ;

    /**
     * Creates new form Console
     * @param main
     */
    public Console(Main main) {
        initComponents();
        this.main = main ;
        jTextArea2.setNavigationFilter(new ConsoleNavigationFilter(15, jTextArea2) );
        OS = "WINDOWS" ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextArea2.addKeyListener(new ConsoleKey());
        ;

        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));

        jTextArea2.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Candara", 0, 13)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("power.text >>> ");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    class ConsoleKey implements KeyListener {

        @Override
        public void keyTyped(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void keyPressed(KeyEvent ke) {
            if (ke.getKeyCode()==10) {
                JTextArea textPane = Editor.get(jTabbedPane1.getSelectedIndex()).getTextPane();
                String all = jTextArea2.getText();
                jTextArea2.setCaretPosition(SetCursor(jTextArea2.getLineCount(),jTextArea2));
                jTextArea2.setSelectionEnd(jTextArea2.getCaret().getDot()+5000);
                String arg = jTextArea2.getSelectedText();
                jTextArea2.setText(all);
                System.out.println(arg);
                if (arg.equals("exit")||arg.equals("exitShell")||arg.equals("closeshell")||arg.equals("0000")) {
                    if (stdin!=null) {
                        stdin.close(); stdin = null ; System.out.println("stdin is out"); type = "power.text >>> " ;
                        jTextArea2.append("\n"+type);
                    } else {
                        System.exit(0);
                    }
                } else if (stdin!=null&&osMinor.contains("windows")) {
                    stdin.println(arg); stdin.flush();
                } else if (arg.equals("open")||arg.equals("Open")||arg.equals("open()")||arg.equals("OPEN")) {
                    open(""); 
                } else if (arg.equals("new")||arg.equals("New")||arg.equals("new()")||arg.equals("NEW")) {
                    main.newInitFile(""); 
                } else if (arg.contains("new ")||arg.contains("New ")||arg.contains("new() ")||arg.contains("NEW ")) {
                    String fol1 = arg.replace("new ", ""); String fol2 = fol1.replace("New ", ""); String fol3 = fol2.replace("new() ", ""); 
                    String fol4 = fol3.replace("NEW ", ""); 
                    main.newInitFile(fol4); jTextArea2.append("\n"+type+"The file "+fol4+" is created in Documents Folder");
                } else if (arg.equals("clear")||arg.equals("Clear")||arg.equals("clear()")||arg.equals("CLEAR")) {
                    jTextArea2.setText("");
                } else if (arg.equals("close")||arg.equals("Close")||arg.equals("close()")||arg.equals("CLOSE")) {
                    main.closeFile(jTabbedPane1.getSelectedIndex());
                } else if (arg.equals("closeall")||arg.equals("closeAll")||arg.equals("close(all)")||arg.equals("CLOSEALL")) {
                    main.closeAllFiles();
                } else if (arg.equals("save")||arg.equals("Save")||arg.equals("save()")||arg.equals("SAVE")) {
                    main.saveFile(jTabbedPane1.getSelectedIndex());
                } else if (arg.equals("saveAll")||arg.equals("saveall")||arg.equals("save(all)")||arg.equals("SAVEALL")) {
                    int tabs = jTabbedPane1.getTabCount();
                    for (int i = tabs - 1; i >= 0; i--) {
                        main.saveFile(i);
                    }
                } else if (arg.equals("print")||arg.equals("Print")||arg.equals("print()")||arg.equals("PRINT")) {
                    main.print(main.createBuffer(jTabbedPane1.getSelectedIndex()));
                } else if (arg.equals("plugin")||arg.equals("plugins")||arg.equals("plugin manager")||arg.equals("pm")) {
                    main.pluginManager.setVisible(true); 
                } else if (arg.equals("installed plugin")||arg.equals("plugins list")||arg.equals("show plugins")||arg.equals("pl")) {
                    for (int count = 0 ; count < Plugins.size(); count ++) {
                        jTextArea2.append("\n"+type+Plugins.get(count).getName()); 
                    }
                } else if (arg.equals("del")||arg.equals("delete")||arg.equals("delete()")||arg.equals("DELETE")) {
                    Editor.remove(jTabbedPane1.getSelectedIndex());
                    listModel.removeElementAt(jTabbedPane1.getSelectedIndex());
                    File del = new File(titleText.getText());
                    jTabbedPane1.remove(jTabbedPane1.getSelectedIndex());
                    del.delete();
                } else if (arg.equals("runAny")||arg.equals("runany")||arg.equals("run(any)")||arg.equals("RUNANY")) {
                    main.runPanel.setVisible(true);
                } else if (arg.equals("run")||arg.equals("run")||arg.equals("run()")||arg.equals("RUN")) {
                    main.RunDBnow(Editor.get(jTabbedPane1.getSelectedIndex()).getFileDire().getText()) ;
                } else if (arg.contains("open ")||arg.contains("Open ")||arg.contains("open() ")||arg.contains("OPEN ")) {
                    String op = arg.replace("open ", ""); String op1 = op.replace("Open ", "");
                    String op2 = op1.replace("open() ", ""); String op3 = op2.replace("OPEN ", "");
                    open(op3);
                } else if (arg.equals("ls")||arg.equals("list")||arg.equals("list()")||arg.equals("dir")||arg.equals("LIST")||arg.equals("DIR")) {
                    File dir = new File(Editor.get(jTabbedPane1.getSelectedIndex()).getParentFolder());
                    File[] files = dir.listFiles();
                    if (files!=null) {
                        jTextArea2.append("\n"+type+"----------------------------------------------------"); 
                        for (File file : files) {
                            if (file.isDirectory()) {
                                jTextArea2.append("\n"+type+file.getName()+" - Folder. Size - "+file.length()/1024+" KB"); 
                            } else {
                                jTextArea2.append("\n"+type+file.getName()+"Size - "+file.length()/1024+" KB"); 
                            }
                        } jTextArea2.append("\n"+type+"----------------------------------------------------"); 
                    }
                } else if (arg.contains("ls ")||arg.contains("list ")||arg.contains("list() ")||arg.contains("dir ")||arg.contains("LIST ")||arg.contains("DIR ")) {
                    String fol1 = arg.replace("ls ", ""); String fol2 = fol1.replace("list ", ""); String fol3 = fol2.replace("list() ", ""); 
                    String fol4 = fol3.replace("LIST ", ""); String fol5 = fol4.replace("DIR ", ""); String fol6 = fol5.replace("dir ", "");  
                    File dir = new File(fol6); 
                    File[] files = dir.listFiles();
                    if (files!=null) {
                        jTextArea2.append("\n"+"----------------------------------------------------"); jTextArea2.append("\n"+type);
                        for (File file : files) {
                            if (file.isDirectory()) {
                                jTextArea2.append("\n"+type+file.getName()+" - Folder. Size - "+file.length()/1024+" KB"); 
                            } else {
                                jTextArea2.append("\n"+type+file.getName()+"Size - "+file.length()/1024+" KB"); 
                            }
                        } jTextArea2.append("\n"+type+"----------------------------------------------------"); 
                    }
                } else if (arg.equals("exit")||arg.equals("Exit")||arg.equals("exit()")||arg.equals("exit(0)")) {
                    System.exit(0);
                } else if (arg.contains("print ")||arg.equals("printText")||arg.equals("printText()")||arg.equals("println()")) {
                    jTextArea2.append("\n"+type+textPane.getText().replace("\n", "\n"+type)); 
                } else if (arg.contains("clear ")||arg.contains("CLEAR ")||arg.contains("clear() ")||arg.contains("Clear ")) {
                    textPane.setText("");
                } else if (arg.equals("copy")||arg.equals("COPY")||arg.equals("copr()")||arg.equals("Copy")) {
                    if (textPane.getSelectedText()!=null) {
                        textPane.copy();
                    } else {
                        jTextArea2.append("\n"+type+"no text selected");
                    }
                } else if (arg.equals("paste")||arg.equals("PASTE")||arg.equals("paste()")||arg.equals("Paste")) {
                    textPane.paste();
                } else if (arg.equals("selectall")||arg.equals("SELECTALL")||arg.equals("selectall()")||arg.equals("SelectAll")) {
                    textPane.selectAll();
                } else if (arg.equals("cut")||arg.equals("Cut")||arg.equals("cut()")||arg.equals("CUT")) {
                    if (textPane.getSelectedText()!=null) {
                        textPane.cut();
                    } else {
                        jTextArea2.append("\n"+type+"no text selected");
                    }
                } else if (arg.contains("nav ")||arg.contains("Nav ")||arg.contains("switch ")||arg.contains("Switch")) {
                    String fol1 = arg.replace("nav ", ""); String fol2 = fol1.replace("Nav ", ""); String fol3 = fol2.replace("switch ", ""); 
                    String fol4 = fol3.replace("Switch ", ""); if (!fol4.contains("a")&&!fol4.contains("e")&&!fol4.contains("i")&&!fol4.contains("o")
                            &&!fol4.contains("u")) { if (jTabbedPane1.getTabCount()>Integer.parseInt(fol4)) {
                            jTabbedPane1.setSelectedIndex(Integer.parseInt(fol4));
                        } else { jTextArea2.append("\n"+type+fol4+" is over the number of opened document(s)"); }
                    } else {
                        jTextArea2.append("\n"+type+fol4+" is not a number only integer is allowed with the initial command ");
                    }
                } else if (arg.contains("add ")||arg.contains("paste ")||arg.contains("add() ")||arg.contains("paste() ")) {
                    String fol1 = arg.replace("add ", ""); String fol2 = fol1.replace("paste ", ""); String fol3 = fol2.replace("add() ", ""); 
                    String fol4 = fol3.replace("paste() ", ""); String fol5 = fol4.replace("nl", System.lineSeparator());  textPane.append(fol5);
                } else if (arg.equals("shell")||arg.equals("cmd")||arg.equals("terminal")||arg.equals("command line")) {
                    try {
                        if (OS.equals("WINDOWS")) {
                            type = System.getProperty("user.home")+">" ; osMinor = "windows" ;
                        } else if (OS.equals("MACOS")) {
                            
                        } else if (OS.equals("LINUX")) {
                            
                        } else {
                            
                        }
                        p = Runtime.getRuntime().exec(command);
                        stdin = new PrintWriter(p.getOutputStream());
                        jTextArea2.append("\n"+type);
                        new Thread(new Synchronize(p.getErrorStream(), System.err, jTextArea2)).start();
                        new Thread(new Synchronize(p.getInputStream(), System.out, jTextArea2)).start();
                        jTextArea2.setNavigationFilter(new ConsoleNavigationFilter(jTextArea2.getText().length(), jTextArea2) );
                        jTextArea2.setCaretPosition(SetCursor(jTextArea2.getText().length(),jTextArea2));
                    } catch (IOException ex) {
                        Logger.getLogger(Console.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    jTextArea2.append("\n"+type+"invalid power text argument : type shell to run command prompt commands"); 
                } if (stdin!=null) {
                    jTextArea2.append("\n"+"-------------------------------------------------------------");
                } else {
                    jTextArea2.append("\n"+type);
                    jTextArea2.setNavigationFilter(new ConsoleNavigationFilter(jTextArea2.getText().length(), jTextArea2) ); 
                    jTextArea2.setCaretPosition(SetCursor(jTextArea2.getText().length(),jTextArea2));
                }
            } 
         }

        @Override
        public void keyReleased(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }
    
    protected void open(String para) {
        if (para.equals("")) {
        int status = fileChooser.showOpenDialog(main);
        if (status == JFileChooser.APPROVE_OPTION) {
           try {
               File files = fileChooser.getSelectedFile();
               Scanner scn = new Scanner(new FileInputStream(files));
               main.openFile(files, scn); main.addRecent(files.getAbsolutePath());
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
           }
        } else {
            System.out.println("No file selected");
        } } else {
            System.out.println(para);
            if (new File(para).exists()) {
            try {
               File files = new File(para);
               Scanner scn = new Scanner(new FileInputStream(files));
               main.openFile(files, scn); main.addRecent(files.getAbsolutePath());
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
           }
            } else {
                jTextArea2.append("\nThe file "+para+" does not exist"); jTextArea2.append("\n"+type); 
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
