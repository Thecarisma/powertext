/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package code.snippets.Menus;

import java.awt.event.*;
import javax.swing.*;
import static power.text.Interface.AccessibleComponent.*;

/**
 *
 * @author Thecarisma
 */
public class JavaMenu {
    
    JMenu javaMenu = new JMenu("Java Snippets"); JMenuItem systemout = new JMenuItem("System.out.println");
    JMenuItem forloop = new JMenuItem("For...Loop"); JMenuItem ifelse = new JMenuItem("If...Else");
    JMenuItem ifelseif = new JMenuItem("If...ElseIf"); JMenuItem classy = new JMenuItem("Class. Name");
    JMenuItem iclassy = new JMenuItem("Inner Class"); JMenuItem mainclass = new JMenuItem("Run Method");
    JMenuItem readFileo = new JMenuItem("Read File Content To String Once");
    JMenuItem readFilel = new JMenuItem("Read File Content To String By Line");
    JMenuItem exitcode = new JMenuItem("Java App Exit Code"); JMenuItem savefile = new JMenuItem("Save File");
    JMenuItem seticon = new JMenuItem("Set JFrame Icon"); JMenuItem slaf = new JMenuItem("System Look and Fell");
    JMenuItem deletefile = new JMenuItem("Delete File"); JMenuItem createfile = new JMenuItem("Create File"); 
    
    public JavaMenu() {
        addMenu(); addActions();
    }
    
    private void addMenu() {
        javaMenu.add(classy); javaMenu.add(mainclass); javaMenu.add(iclassy); javaMenu.add(systemout); javaMenu.add(forloop); 
        javaMenu.add(ifelse); javaMenu.add(ifelseif); javaMenu.add(readFileo); javaMenu.add(readFilel); javaMenu.add(exitcode); 
        javaMenu.add(savefile); javaMenu.add(seticon); javaMenu.add(slaf); javaMenu.add(deletefile); javaMenu.add(createfile); 
    }
    
    private void addActions() {
        systemout.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("System.out.println();");
        }); forloop.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("for () {\n\n}");
        }); ifelse.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("if () { \n\n } else { \n\n }");
        }); ifelseif.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("if () { \n\n } else if () { \n\n } else { \n\n }");
        }); classy.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*class generated by Power Text\n**/\n"
                    + "public class NameOfClass { \n\n\t\tpublic NameOfClass() {\n\n\t\t}\n\n }");
        }); iclassy.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*inner class generated by Power Text\n**/\n"
                    + "class NameOfClass { \n\n\n\n\n }");
        }); mainclass.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*run method generated by Power Text\n**/\n"
                    + "\t\tpublic static void main(String[]args) {\n\t\t//input you command here\n\t\t}");
        }); readFileo.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*read file once code generated by Power Text\n**/\n"
                    + "//add import java.nio.charset.StandardCharsets;\n//add import java.nio.file.Files;\n//add import java.nio.file.Paths;\n"
                    + "File file = new File(\"FULLPATHTOFILE\");\n"
                    + "String text = new String(Files.readAllBytes(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8);");
        }); readFilel.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*read file line by line code generated by Power Text\n**/\n"
                    + "//add import import java.io.File;\n//add import java.io.FileInputStream;\n//add import java.util.Scanner;\n"
                    + "File file = new File(\"FULLPATHTOFILE\");\n"
                    + "Scanner scn = new Scanner(new FileInputStream(file));\n"
                    + "String buffer = \"\";\n" +
"                       while (scn.hasNext()) {\n" +
"                    buffer += scn.nextLine() + \"\\n\";\n}//you file content is now read into ~buffer~");
        }); exitcode.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("System.exit(0);");
        }); savefile.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*save file code generated by Power Text\n**/\n//add import java.io.BufferedWriter;\n" +
"//add import java.io.FileWriter;\n" +
"//add import java.io.IOException;\n" +
"//add import java.util.logging.Level;\n" +
"//add import java.util.logging.Logger;\n"
                    + "try { \n" +
"            String filePath = \"PATHTOFILETOSAVETO\";\n" +
"            BufferedWriter bufferedWriter = null; String content = \"THECONTENTYOUWANTTOSAVETOFILE\" ;\n" +
"            bufferedWriter = new BufferedWriter(new FileWriter(filePath, false));\n" +
"            bufferedWriter.write(fileContent);  \n" +
"            bufferedWriter.flush(); bufferedWriter.close();\n" +
"        } catch (IOException ex) {\n" +
"            Logger.getLogger(CLASSNAME.class.getName()).log(Level.SEVERE, null, ex);\n" +
"        } }");
        }); seticon.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("//add import java.awt.Toolkit;\n//call the method ~setIcon()~ from your JFRAME class method\nprivate void setIcon() {\n" +
"        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"PATHTOYOURIMAGEINPROJECTSRC eg /com/power/text/images/powertext.png\")));\n" +
"    }");
        }); slaf.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("/**\n*system look and feel code generated by Power Text\n**/\ntry {\n" +
"            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n" +
"                if (\"Nimbus\".equals(info.getName())) {\n" +
"                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n" +
"                    break;\n" +
"                }\n" +
"            }\n" +
"        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {\n" +
"            java.util.logging.Logger.getLogger(CLASSNAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n" +
"        }");
        }); deletefile.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("//add import import java.io.File;;\nFile file = new File(FULLPATHTOFILE);"
                    + "\nfile.delete();");
        }); createfile.addActionListener((ActionEvent ae) -> {
            getCurrentPTextArea().replaceSelection("//add import import java.io.*;\n//FOLDER MUST EXIST else CREATE FOLDER FIRST"
                    + "File file = new File(FOLDER+FILENAMEWITEXTENSION);\n"
                    + "try (DataOutputStream d = new DataOutputStream(new FileOutputStream(file))) {\n"
                    + "String line = \"BYTETOWRITENOTNECCESSARYSTRING\" ; d.writeBytes(line); } catch (FileNotFoundException ex) { \n"
                    + "Logger.getLogger(CLASSNAME.class.getName()).log(Level.SEVERE, null, ex);}\n"
                    + "catch (IOException ex) {\t\t\tLogger.getLogger(JavaMenu.class.getName()).log(Level.SEVERE, null, ex);\n}");
        }); 
    }
    
    public JMenu getJavaMenu() {
        return javaMenu ;
    }
    
}
